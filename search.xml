<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[【Android开源框架】之数据库框架]]></title>
      <url>/2017/09/27/%E3%80%90Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E3%80%91%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h2 id="GreenDAO"><a href="#GreenDAO" class="headerlink" title="GreenDAO"></a><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">GreenDAO</a></h2><p>GreenDAO是一个轻量级，快速的orm框架。简化建表、查询、更新、插入、事务、索引的操作<br>特性:</p>
<ul>
<li>性能突出(比ormlite快4-5倍), performance</li>
<li>库小，核心包小于100k</li>
<li>简单易用的API</li>
<li>支持protobuf</li>
<li>自动生成数据库访问代码</li>
</ul>
<h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a><a href="https://github.com/chennaione/sugar" target="_blank" rel="external">Realm</a></h2><p>移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好。<br>特性:</p>
<ul>
<li>着重移动端</li>
<li>简单易用的API</li>
<li>支持线程安全，关系数据库和加密</li>
<li>访问快速</li>
<li>跨平台</li>
</ul>
<h2 id="OrmLite"><a href="#OrmLite" class="headerlink" title="OrmLite"></a><a href="https://sourceforge.net/projects/ormlite/files/releases/com/j256/ormlite/" target="_blank" rel="external">OrmLite</a></h2><p>OrmLite不是Android平台专用的orm框架，它是一个Java orm，OrmLite For Android增加了对Android平台的支持。</p>
<h2 id="ActiveAndroid"><a href="#ActiveAndroid" class="headerlink" title="ActiveAndroid"></a><a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="external">ActiveAndroid</a></h2><p>ActiveAndroid是一个轻量级的orm框架，名称命令方式类似于Yii、Rails等使用的orm框架ActiveRecord</p>
<h2 id="DBFlow"><a href="#DBFlow" class="headerlink" title="DBFlow"></a><a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">DBFlow</a></h2><p>一个速度极快，功能强大，而且非常简单的 Android 数据库 ORM 库</p>
<h2 id="Sugar"><a href="#Sugar" class="headerlink" title="Sugar"></a><a href="https://github.com/chennaione/sugar" target="_blank" rel="external">Sugar</a></h2><p>用超级简单的方法处理Android数据库<br>特性:</p>
<ul>
<li>配置少</li>
<li>自动生成表结构</li>
<li>支持在不同模式版本直接切换</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo常用命令笔记]]></title>
      <url>/2017/07/31/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul>
<li>npm install hexo -g #安装  </li>
<li>npm update hexo -g #升级  </li>
<li>hexo init #初始化</li>
</ul>
<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><ul>
<li>hexo n “我的博客” == hexo new “我的博客” #新建文章</li>
<li>hexo p == hexo publish</li>
<li>hexo g == hexo generate#生成</li>
<li>hexo s == hexo server #启动服务预览</li>
<li>hexo d == hexo deploy#部署</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul>
<li>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器</li>
<li>hexo server -s #静态模式</li>
<li>hexo server -p 5000 #更改端口</li>
<li><p>hexo server -i 192.168.1.1 #自定义 IP</p>
</li>
<li><p>hexo clean #清除缓存 网页正常情况下可以忽略此条命令</p>
</li>
<li>hexo g #生成静态网页</li>
<li>hexo d #开始部署</li>
</ul>
<h2 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h2><ul>
<li>hexo generate #使用 Hexo 生成静态文件快速而且简单</li>
<li>hexo generate –watch #监视文件变动</li>
</ul>
<p>完成后部署<br>两个命令的作用是相同的</p>
<ul>
<li>hexo generate –deploy</li>
<li>hexo deploy –generate</li>
<li>hexo deploy -g</li>
<li>hexo server -g</li>
</ul>
<h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><ul>
<li>hexo publish [layout] <title></title></li>
</ul>
<h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><ul>
<li>hexo new “postName” #新建文章</li>
<li>hexo new page “pageName” #新建页面</li>
<li>hexo generate #生成静态页面至public目录</li>
<li>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li>
<li><p>hexo deploy #将.deploy目录部署到GitHub</p>
</li>
<li><p>hexo new [layout] <title></title></p>
</li>
<li>hexo new photo “My Gallery”</li>
<li>hexo new “Hello World” –lang tw</li>
</ul>
<h2 id="变量-描述"><a href="#变量-描述" class="headerlink" title="变量    描述"></a>变量    描述</h2><pre><code>layout    布局
title    标题
date    文件建立日期
title: 使用Hexo搭建个人博客
layout: post
date: 2014-03-03 19:07:43
comments: true
categories: Blog
tags: [Hexo]
keywords: Hexo, Blog
description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。
</code></pre>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 配置用户名、密码]]></title>
      <url>/2017/07/31/Git-%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E3%80%81%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global credential.helper store</div></pre></td></tr></table></figure>
<p>然后git pull一次，输入一次用户名密码就会自动保存该用户名密码；</p>
<p>查看配置的用户信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --list</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 基本语法]]></title>
      <url>/2017/07/12/Markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h2><p>Markdown是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。</p>
<ul>
<li>简单标记符完成排版，所写即所见，让你专注于文字而不是排版</li>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开</li>
<li>格式转换方便，Markdown文本可以轻松转换为 html、pdf等</li>
<li>Markdown 的标记语法有极好的可读性</li>
</ul>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><a href="http://www.jianshu.com/p/815788f4b01d" target="_blank" rel="external">基础语法</a></p>
<h2 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2><p><a href="http://www.jianshu.com/p/0b257de21eb5" target="_blank" rel="external">高级语法</a></p>
]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ 开源弹幕引擎·烈焰弹幕使(DanmakuFlameMaster)]]></title>
      <url>/2017/07/11/%E5%BC%80%E6%BA%90%E5%BC%B9%E5%B9%95%E5%BC%95%E6%93%8E%C2%B7%E7%83%88%E7%84%B0%E5%BC%B9%E5%B9%95%E4%BD%BF-DanmakuFlameMaster/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>DanmakuFlameMaster 是 Android 上开源弹幕解析绘制引擎项目，也是 Android 上最好的开源弹幕引擎·烈焰弹幕。其架构清晰，简单易用，支持多种高效绘制</p>
<ul>
<li><p>B站xml弹幕格式解析</p>
</li>
<li><p>基础弹幕精确还原绘制</p>
</li>
<li><p>支持mode7特殊弹幕</p>
</li>
<li><p>多核机型优化，高效的预缓存机制</p>
</li>
<li><p>支持多种显示效果选项实时切换</p>
</li>
<li><p>实时弹幕显示支持</p>
</li>
<li><p>换行弹幕支持/运动弹幕支持</p>
</li>
<li><p>支持自定义字体</p>
</li>
<li><p>支持多种弹幕参数设置</p>
</li>
<li><p>支持多种方式的弹幕屏蔽</p>
</li>
</ul>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>github地址：<a href="https://github.com/Bilibili/DanmakuFlameMaster" target="_blank" rel="external">https://github.com/Bilibili/DanmakuFlameMaster</a></p>
<h2 id="Android-Studio集成方法"><a href="#Android-Studio集成方法" class="headerlink" title="Android Studio集成方法"></a>Android Studio集成方法</h2><p>build.gradle中添加</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.github.ctiao:dfm:0.4.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1.布局文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;master.flame.danmaku.ui.widget.DanmakuView</div><div class="line">	android:id=<span class="string">"@+id/sv_danmaku"</span></div><div class="line">	android:layout_width=<span class="string">"match_parent"</span></div><div class="line">	android:layout_height=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<p>2.初始化</p>
<pre><code>private BaseDanmakuParser mParser;//解析器对象
private IDanmakuView mDanmakuView;
private DanmakuContext mContext;
mDanmakuView = (IDanmakuView) findViewById(R.id.sv_danmaku);
mContext = DanmakuContext.create();
// 设置弹幕的最大显示行数
HashMap&lt;Integer, Integer&gt; maxLinesPair = new HashMap&lt;Integer, Integer&gt;();
// 滚动弹幕最大显示3行
maxLinesPair.put(BaseDanmaku.TYPE_SCROLL_RL, 3); 
// 设置是否禁止重叠
HashMap&lt;Integer, Boolean&gt; overlappingEnablePair = new HashMap&lt;Integer, Boolean&gt;();
overlappingEnablePair.put(BaseDanmaku.TYPE_SCROLL_LR, true);
overlappingEnablePair.put(BaseDanmaku.TYPE_FIX_BOTTOM, true);
mContext.setDanmakuStyle(IDisplayer.DANMAKU_STYLE_STROKEN, 3)
        .setDuplicateMergingEnabled(false)
        .setScrollSpeedFactor(1.2f) //是否启用合并重复弹幕
        .setScaleTextSize(1.2f) //设置弹幕滚动速度系数,只对滚动弹幕有效
        .setCacheStuffer(new SpannedCacheStuffer(), mCacheStufferAdapter) // 图文混排使用SpannedCacheStuffer  设置缓存绘制填充器，默认使用{@link SimpleTextCacheStuffer}只支持纯文字显示, 如果需要图文混排请设置{@link SpannedCacheStuffer}如果需要定制其他样式请扩展{@link SimpleTextCacheStuffer}|{@link SpannedCacheStuffer}
        .setMaximumLines(maxLinesPair) //设置最大显示行数
        .preventOverlapping(overlappingEnablePair); //设置防弹幕重叠，null为允许重叠
if (mDanmakuView != null) {
    mParser = createParser(this.getResources().openRawResource(R.raw.comments)); //创建解析器对象，从raw资源目录下解析comments.xml文本
    mDanmakuView.setCallback(new master.flame.danmaku.controller.DrawHandler.Callback() {
        @Override
        public void updateTimer(DanmakuTimer timer) {
        }

        @Override
        public void drawingFinished() {
        }

        @Override
        public void danmakuShown(BaseDanmaku danmaku) {
        }

        @Override
        public void prepared() {
            mDanmakuView.start();
        }
    });
mDanmakuView.prepare(mParser, mContext);
mDanmakuView.showFPS(false); //是否显示FPS
mDanmakuView.enableDanmakuDrawingCache(true);
</code></pre><p>3.创建解析器对象</p>
<pre><code>/**
 * 创建解析器对象，解析输入流
 * @param stream
 * @return
 */
private BaseDanmakuParser createParser(InputStream stream) {
    if (stream == null) {
        return new BaseDanmakuParser() {
            @Override
            protected Danmakus parse() {
                return new Danmakus();
            }
        };
    }
    ILoader loader = DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_BILI);
    try {
        loader.load(stream);
    } catch (IllegalDataException e) {
        e.printStackTrace();
    }
    BaseDanmakuParser parser = new BiliDanmukuParser();
    IDataSource&lt;?&gt; dataSource = loader.getDataSource();
    parser.load(dataSource);
    return parser;
}
注：
DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_BILI) //xml解析
DanmakuLoaderFactory.create(DanmakuLoaderFactory.TAG_ACFUN) //json文件格式解析
</code></pre><p>4.自定义弹幕背景和边距</p>
<pre><code>private static class BackgroundCacheStuffer extends SpannedCacheStuffer {
    // 通过扩展SimpleTextCacheStuffer或SpannedCacheStuffer个性化你的弹幕样式
    final Paint paint = new Paint();
    @Override
    public void measure(BaseDanmaku danmaku, TextPaint paint) {
        danmaku.padding = 10;  // 在背景绘制模式下增加padding
        super.measure(danmaku, paint);
    }

    @Override
    public void drawBackground(BaseDanmaku danmaku, Canvas canvas, float left, float top) {
        paint.setColor(0x8125309b);  //弹幕背景颜色
        canvas.drawRect(left + 2, top + 2, left + danmaku.paintWidth - 2, top + danmaku.paintHeight - 2, paint);
    }

    @Override
    public void drawStroke(BaseDanmaku danmaku, String lineText, Canvas canvas, float left, float top, Paint paint) {
        // 禁用描边绘制
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[毕业后这一年的收获]]></title>
      <url>/2017/07/07/%E6%AF%95%E4%B8%9A%E5%90%8E%E8%BF%99%E4%B8%80%E5%B9%B4%E7%9A%84%E6%94%B6%E8%8E%B7/</url>
      <content type="html"><![CDATA[<p>去年的七月拿到毕业证正式毕业，一转眼就又是七月了，这一年还是经历了不少事，回头看看，这一年中的大多数选择还是比较满意的。今天趁着懒癌没发作，总结一下这一年的收获吧。</p>
<h2 id="当前状况"><a href="#当前状况" class="headerlink" title="当前状况"></a>当前状况</h2><p>毕业一年，上海，创业公司，安卓开发，无房无车，几乎无存款，身体还算健康，但缺乏锻炼免疫力差，女友关系和睦，离家很远。</p>
<h2 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h2><p>毕业后与毕业前最大的改变就是进入社会，开始工作。</p>
<p>庆幸今年没有因为工作中的一点不顺心就离职，毕竟工作还不满一年，那会儿换工作的话还需要花时间适应新工作新环境，能够用来学习提升的时间就更少了。</p>
<p>人们常说第一份工作会影响人的很多方面，包括人生观、价值观，的确如此，在过去一年工作中，我所在的公司在不停地变化，处在这个环境中的我，受益很多。</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h3 id="沟通协作"><a href="#沟通协作" class="headerlink" title="沟通协作"></a>沟通协作</h3><h2 id="未来目标"><a href="#未来目标" class="headerlink" title="未来目标"></a>未来目标</h2><p>在开始工作之前，我并没有思考过我为什么工作，因此在过去一年里我浪费了很多时间纠结迷茫徘徊，如果连目标都没设定，怎么能走得直走得快呢？</p>
<p>工作的目的有很多，除了钱是一部分原因，有的人是不知道该干什么就先工作着吧，有的人是为了学技能攒经验去做更好的事，有的人是为了做些事业实现梦想，也有的人只是无聊找点事做。</p>
<p>我的中期目标是多年后回老家自己开家信息技术公司，具体业务还不清楚，但是前几年需要比较广地掌握三端（APP、WEB、后台）技能。</p>
<p>因此头两年的小目标就是先夯实安卓开发。</p>
<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo安装]]></title>
      <url>/2017/07/07/Hexo%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>我们很经常会要用到Git以及Github，首先来安装Git：</p>
<ul>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="external">下载Git</a></li>
</ul>
<p>选择合适的版本下载然后安装，我们稍后将会用上。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>因为Hexo是一款基于Node.js的静态博客框架，所以我们还需要安装好它：</p>
<ul>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="external">下载Node.js</a></li>
</ul>
<p>同样选择对应自己电脑的版本下载安装。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装好Git和Node.js之后，轮到我们今天的主角登场了~先打开Git Bash，然后输入下面这条命令来安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>来试试安装成功没有，输入以下命令查看Hexo的版本信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div></pre></td></tr></table></figure>
<p>如果出现类似内容说明安装成功啦！</p>
<pre><code>hexo-cli: 0.1.9
os: Windows_NT 6.1.7601 win32 ia32
http_parser: 2.3
node: 0.12.2
v8: 3.28.73
uv: 1.4.2-node1
zlib: 1.2.8
modules: 14
openssl: 1.0.1m
</code></pre><h2 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h2><p>现在我们可以开始创建博客写文章了！是不是很快~下面会介绍几个Hexo的常用命令，掌握之后就能愉悦地开始写作之旅了XD</p>
<h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><p>假设我在E盘有个叫blog的文件夹，现在我们用Git Bash进去这个文件夹里，然后将它初始化为我们的博客目录：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>安装成功的提示信息：</p>
<pre><code>INFO  Copying data to E:\blog
INFO  You are almost done! Don&apos;t forget to run &apos;npm install&apos; before you start blogging with Hexo!
</code></pre><p>注意看到第二条！提示我们在开始使用前要先执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>这条命令是用来安装依赖包的，具体安装内容可以在package.json文件里找到。安装好了之后会看到一大串的信息，这里就不贴出来了。现在我们可以看到blog目录下的文件结构是这样的：</p>
<pre><code>.
├── _config.yml
├── node_modules
├── package.json
├── scaffolds
├── source
|   └── _posts
└── themes
</code></pre><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"我的第一篇文章"</span></div></pre></td></tr></table></figure>
<h3 id="生成界面"><a href="#生成界面" class="headerlink" title="生成界面"></a>生成界面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate 或者 hexo g</div></pre></td></tr></table></figure>
<h3 id="界面预览"><a href="#界面预览" class="headerlink" title="界面预览"></a>界面预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server 或者 hexo s</div></pre></td></tr></table></figure>
<p>我们会看到这样一条提示：</p>
<pre><code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.
</code></pre><p>打开浏览器访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><p>是不是很激动！成功了有木有~不过等等，博客名写着Hexo，可不是我想的那样噢，还有还有，页面底部的版权信息里作者名字也不是我啊喂！来，我们来改掉它们！</p>
<p>找到博客根目录下的配置文件_config.yml，用自己喜欢的文本编辑器编辑它。看到# Site的那一部分，里面的title就是博客的名字，subtitle就是副标题，author对应的那个就是作者名字啦，把自己的大名写上去吧！</p>
<p>还有很多配置项可以修改，这里就不详细讲了，可以查看<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">Hexo官方文档</a>对照着修改配置。</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>在这个看脸的世界，我们的博客怎么可以没有颜值呢，折腾完上面的那些之后，是时候给博客挑上件漂亮的“衣服”了。</p>
<p>Hexo官方网站上展示了多套主题，可以按自己的口味挑选，或者动手能力强的，可以试着自己写一套独一无二的主题噢XD</p>
<p>这里以<a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">Apollo</a>这个主题为例，进去github页面之后可以看到很详细的安装和启动方法，这里就不展开来讲了。</p>
<h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page categories</div></pre></td></tr></table></figure>
<p>编辑站点的source/categories/index.md，添加</p>
<pre><code>title: categories
date: 2015-10-20 06:49:50
type: &quot;categories&quot;
comments: false
</code></pre><h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page tags</div></pre></td></tr></table></figure>
<p>编辑站点的source/tags/index.md，添加</p>
<pre><code>title: tags
date: 2015-10-20 06:49:50
type: &quot;tags&quot;
comments: false
</code></pre>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/06/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
